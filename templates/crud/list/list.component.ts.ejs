import { AbstractFireStore } from '@ai1/3rd/firebase/abstracts';
import { Ai1BasicPlaceholderComponent } from '@ai1/ui-common/components/placeholders/basic-placeholder.component';
import { AsyncPipe, TitleCasePipe } from '@angular/common';
import { Component } from '@angular/core';
import { FormControl, FormsModule, ReactiveFormsModule } from '@angular/forms';
import { MatButton } from '@angular/material/button';
import { MatFormField, MatPrefix } from '@angular/material/form-field';
import { MatIcon } from '@angular/material/icon';
import { MatInput } from '@angular/material/input';
import { MatTooltip } from '@angular/material/tooltip';
import { RouterLink } from '@angular/router';
import { combineLatest, map, of, startWith } from 'rxjs';
import { <%= entityPascal %>CardComponent } from '../card/card.component';
import { <%= entityPascal %> } from '../models/<%= entityLower %>.model';

@Component({
    selector: 'ai1-<%= entityKebab %>-list',
    standalone: true,
    templateUrl: './list.component.html',
    imports: [
        // ng
        FormsModule,
        ReactiveFormsModule,
        RouterLink,
        AsyncPipe,
        TitleCasePipe,
        // mat
        MatFormField,
        MatInput,
        MatPrefix,
        MatButton,
        MatIcon,
        MatTooltip,
        // ai1
        Ai1BasicPlaceholderComponent,
        <%= entityPascal %>CardComponent,
        // fuse
    ],
})
export class <%= entityPascal %>ListComponent extends AbstractFireStore {
    // Env - readonly
    // Template
    readonly title = '<%= entityLower %>';
    // @inputs
    // @outputs
    // Form
    searchCtrl = new FormControl('');
    // Collections - readonly
    readonly #<%= entityLower %> = '<%= entityLower %>';
    // Privates - #
    // Helpers
    isResponse = false;
    // Obs$
    filtered$ = of([]);
    // DI
    #<%= entityLower %>s$ = this._queryCollection$(this.#<%= entityLower %>, [], []).pipe(
        map((<%= entityLower %>s: <%= entityPascal %>[]) => {
            if (<%= entityLower %>s) this.isResponse = true;
            return <%= entityLower %>s;
        })
    );
    // =========
    // Contructor
    // Hooks - unsubscribe all on the ngOnDestroy
    ngOnInit(): void {
        this.#initSearch();
    }
    // =========
    // Public methods used in the template.
    // Public http/firebase intercation.
    // =========
    // Private methods - #
    #initSearch() {
        const search$ = this.searchCtrl.valueChanges.pipe(
            startWith(this.searchCtrl.value),
            map((value) => value.trim().toLowerCase())
        );

        this.filtered$ = combineLatest([this.#<%= entityLower %>s$, search$]).pipe(
            map(([<%= entityLower %>s, searchedValue]: any[]) =>
            <%= entityLower %>s.filter((<%= entityLower %>: <%= entityPascal %>) =>
                <%= entityLower %>.name.toLowerCase().includes(searchedValue)
                )
            )
        );
    }
}
